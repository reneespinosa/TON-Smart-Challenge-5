#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { return (); }

    int op = in_msg_body~load_uint(32);


  slice cin_msg = in_msg_full.begin_parse();
  cin_msg~load_uint(4);
  slice store = get_data().begin_parse();
    (int chain, int dir) = store~load_msg_addr().parse_std_addr();
  
    cell diccionario = store~load_dict();

  if (op == 0x368ddef3) {
        slice dd = cin_msg~load_msg_addr();
        (int chain, int dir2) = dd.parse_std_addr();
        throw_unless(120, dir == dir2);

        in_msg_body~load_uint(64);
        int dir3 = in_msg_body~load_std_addr();

        diccionario~udict_set(256, dir3, in_msg_body);

        set_data(begin_cell()
            .store_slice(dir)
            .store_dict(diccionario)
            .end_cell());   
  }

  if (op == 0x278205c8) {
    (int chain, int dir2) = cin_msg~load_msg_addr().parse_std_addr();
    throw_unless(120, dir == dir2);
  }
}

cell get_users() method_id {
  (slice store, slice dir) = get_data().begin_parse().load_msg_addr();
  return store~load_dict();
}

int get_user_share(slice cosa) method_id {
  (int chain, int dir) = cosa.parse_std_addr();
  (slice s, int num) = get_users().udict_get?(256, dir);
  if (num) {
    return s~load_uint(32);
  } else {
    return 0;  
  }
}
