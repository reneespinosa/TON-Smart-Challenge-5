#include "imports/stdlib.fc";

int now() asm "NOW";
int slice_hash(slice s) asm "HASHSU";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
() accept_message() impure asm "ACCEPT";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
(slice, int) ~load_uint(slice s, int len) asm( -> 1 0) "LDUX";
(slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";
slice slice_last(slice s, int len) asm "SDCUTLAST";
builder store_grams(builder b, int x) asm "STGRAMS";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

() recv_external(slice ExtInMsgBody) impure {


    int op = ExtInMsgBody~load_uint(32);


    if(op == 0x9df10277)
    {
        slice Storage = get_data().begin_parse();
        int public_key = Storage~load_uint(256);
        int execution_time = Storage~load_uint(32);
        slice receiver = Storage~load_msg_addr();
        int seqno = Storage~load_uint(32);


        int query_id = ExtInMsgBody~load_uint(64);
        slice signature = ExtInMsgBody~load_bits(512);
        slice ref = ExtInMsgBody~load_ref().begin_parse();
        int hash = slice_hash(ref);
        int locked_for = ref~load_uint(32);
        int new_seqno = ref~load_uint(32);

        throw_if( 119 , new_seqno != seqno + 1);
        throw_unless(120, check_signature(hash,signature,public_key));
        throw_if( 121 , locked_for <= 0);
        throw_if( 122 ,  execution_time < now());
        throw_if( 123 ,  now() + locked_for < execution_time);

        accept_message();

        execution_time = locked_for + now();
        seqno = new_seqno;

        set_data(
            begin_cell()
                .store_uint(public_key,256)
                .store_uint(execution_time,32)
                .store_slice(receiver)
                .store_uint(seqno,32)
            .end_cell()
        );

    }
 
    if(op == 0xbb4be234)
    {
        throw_if(124 , execution_time > now());
        accept_message();  

        slice Storage = get_data().begin_parse();
        Storage~load_uint(256);
        Storage~load_uint(32);
        slice receiver = Storage~load_msg_addr();    

            cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(receiver)
                .store_coins(0)
                .store_uint(0,1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();

        send_raw_message(msg,128);        
        
    }
}

int get_seqno() method_id {
    slice Storage = get_data().begin_parse();
    int public_key = Storage~load_uint(256);
    int execution_time = Storage~load_uint(32);
    slice receiver = Storage~load_msg_addr();
    int seqno = Storage~load_uint(32);
    return seqno;
} 

int get_execution_time() method_id {
    slice Storage = get_data().begin_parse();
    int public_key = Storage~load_uint(256);
    int execution_time = Storage~load_uint(32);
    return execution_time;
}