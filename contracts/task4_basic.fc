#include "imports/stdlib.fc";

forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP"; 
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";
tuple empty_tuple() asm "NIL";
int tuple_length (tuple t) asm "TLEN";
forall X, Y -> [X, Y] pair(X x, Y y) asm "PAIR";
forall X, Y -> (X, Y) unpair([X, Y] t) asm "UNPAIR";
forall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm "4 TUPLE";
forall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm "4 UNTUPLE";
forall X -> X first(tuple t) asm "FIRST";
forall X -> X second(tuple t) asm "SECOND";
forall X -> X third(tuple t) asm "THIRD";
forall X -> X fourth(tuple t) asm "3 INDEX";
forall X -> tuple set_index_var(tuple t, X value, int position) asm "SETINDEXVAR";
forall X -> (tuple, ()) ~set_index_var(tuple t, X value, int position) asm "SETINDEXVAR";

;; at for accessing positions
;; . 46
;; ? 63
;; ! 33
;; X 88
;; S 83
;; E 69

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

int out_of_index(int n,int m ,int x ,int y)
{
    if(x < 0)
    {
        return 0;
    }
    if(x > n)
    {
        return 0;
    }

    if(y < 0)
    {
        return 0;
    }

    if(y > m)
    {
        return 0;
    }

    return -1;
}

int min_val(int x,int y)
{
    int a = x;
    
    if(a > y)
    {
        a = y;
    }

    return a;
}


(int, int, int, tuple) solve(int n, int m, tuple maze) method_id
{

        int stax = -1;
        int stay = -1;
        int endx = -1;
        int endy = -1;
        tuple cmaze = maze;

        int i = 0;
        int j = 0;
        
        

        while( i < n)
        {
            j = 0;

            while( j < m)
            {
                ;; S 83
                if( maze.at(i).at(j) == 83 )
                {
                    stax = i;
                    stay = j;
                    cmaze~set_index_var(cmaze.at(stax).set_index_var(0, stay), stax);
                }


                ;; E 69
                if( maze.at(i).at(j) == 69)
                {
                    endx = i;
                    endy = j;
                    cmaze~set_index_var(cmaze.at(endx).set_index_var(100, endy), endx);
                }

                ;; . 46
                if( maze.at(i).at(j) == 46)
                {
                    cmaze~set_index_var(cmaze.at(i).set_index_var(100, j), i);
                }


                ;; ?  63
                if( maze.at(i).at(j) == 63)
                {
                    cmaze~set_index_var(cmaze.at(i).set_index_var(101, j), i);
                }


                ;; X 88
                if( maze.at(i).at(j) == 88)
                {
                    cmaze~set_index_var(cmaze.at(i).set_index_var(102, j), i);
                }

                
                j = j + 1;
            }

            i = i + 1;
        }

        

        ;; got start and end positions
        ;; setted . to max  
        ;; setted ? to 101
        ;; setted E to 100
        ;; setted S to 0
        ;; setted X to 103
        
        int len_path1 = cmaze.at(endx).at(endy);

        if(len_path1 == 100)
        {
            tuple a = null();
            return (-1,0,0,a);
        }


        ;; shortest path
        int k = 0;
        {-while(k <= 100)
        {
            i = 0;
            j = 0;

             while( i < n)
             {
                j = 0;

                while( j < m)
                {

                    if(cmaze.at(i).at(j) <= 100)
                    {

                        if(out_of_index(n,m,i + 1,j))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i + 1).at(j) + 1 ),j);
                        }

                        if(out_of_index(n,m,i - 1,j))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i - 1).at(j) + 1 ),j);
                        }

                        if(out_of_index(n,m,i,j + 1))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i).at(j + 1) + 1),j);
                        }

                        if(out_of_index(n,m,i,j - 1))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i).at(j - 1) + 1),j);
                        }

                        if(out_of_index(n,m,i + 1,j + 1))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i + 1).at(j + 1) + 1),j);
                        }

                        if(out_of_index(n,m,i + 1,j - 1))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i + 1).at(j - 1) + 1),j);
                        }

                        if(out_of_index(n,m,i - 1,j + 1))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i - 1).at(j + 1) + 1),j);
                        }

                        if(out_of_index(n,m,i - 1,j - 1))
                        {
                            cmaze.at(i).set_index_var( min_val(cmaze.at(i).at(j) , cmaze.at(i - 1).at(j - 1) + 1),j);
                        }

                    }
                
                     j = j + 1;
                }

                i = i + 1;
            }
            k = k + 1;
        }
        -}
        

         

        return (-2,0,0,null());



        {-
        if(len_path1  100)
        {
            
            ;; contruct the path

            int cx = endx;
            int cy = endy;
            int val = len_path1;
            int doo = -1;

            while(doo)
            {
                
                int bestcx = cx;
                int bestcy = cy;

                if(out_of_index(n,m,cx + 1,cy))
                {
                    if(cmaze.at(cx + 1).at(cy) < val)
                    {
                        val = cmaze.at(cx + 1).at(cy);
                        bestcx = cx + 1;
                        bestcy = cy;
                    }
                }

                if(out_of_index(n,m,cx - 1,cy))
                {
                    if(cmaze.at(cx - 1).at(cy) < val)
                    {
                        val = cmaze.at(cx - 1).at(cy);
                        bestcx = cx - 1;
                        bestcy = cy;
                    }
                }

                if(out_of_index(n,m,cx,cy + 1))
                {
                    if(cmaze.at(cx).at(cy + 1) < val)
                    {
                        val = cmaze.at(cx).at(cy + 1);
                        bestcx = cx ;
                        bestcy = cy + 1;
                    }
                }

                if(out_of_index(n,m,cx,cy - 1))
                {
                    if(cmaze.at(cx).at(cy - 1) < val)
                    {
                        val = cmaze.at(cx).at(cy - 1);
                        bestcx = cx ;
                        bestcy = cy - 1;
                    }
                }

                if(out_of_index(n,m,cx + 1,cy + 1))
                {
                    if(cmaze.at(cx + 1).at(cy + 1) < val)
                    {
                        val = cmaze.at(cx + 1).at(cy + 1);
                        bestcx = cx + 1;
                        bestcy = cy + 1;
                    }
                }

                if(out_of_index(n,m,cx + 1,cy - 1))
                {
                    if(cmaze.at(cx + 1).at(cy - 1) < val)
                    {
                        val = cmaze.at(cx + 1).at(cy - 1);
                        bestcx = cx + 1;
                        bestcy = cy - 1;
                    }
                }

                if(out_of_index(n,m,cx - 1,cy + 1))
                {
                    if(cmaze.at(cx - 1).at(cy - 1) < val)
                    {
                        val = cmaze.at(cx - 1).at(cy + 1);
                        bestcx = cx - 1;
                        bestcy = cy + 1;
                    }
                }

                if(out_of_index(n,m,cx - 1,cy - 1))
                {
                    if(cmaze.at(cx - 1).at(cy - 1) < val)
                    {
                        val = cmaze.at(cx - 1).at(cy - 1);
                        bestcx = cx - 1;
                        bestcy = cy - 1;
                    }
                }

                cx = bestcx;
                cy = bestcy;


                if(cx == stax){
                    if(cy == stay)
                        {
                            doo = 0;
                        }
                }

                if(doo == -1)
                {
                    maze.at(cx).set_index_var(33,cy);
                }

            }

            return(-1,0,len_path1,maze);
          
        }
        -}

        ;;return (-1,0,0,null());
}

