#include "imports/stdlib.fc";

forall X -> tuple set_index_var(tuple t, X value, int position) asm "SETINDEXVAR";
forall X -> (tuple) to_tuple (X x) asm "NOP";

 
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

int out_of_index(int n,int m ,int x ,int y)
{
    if(x < 0)
    {
        return 0;
    }
    if(x >= n)
    {
        return 0;
    }

    if(y < 0)
    {
        return 0;
    }

    if(y >= m)
    {
        return 0;
    }

    return 1;
}
 
int min_val(int x,int y)
{
    int a = x;
    
    if(a > y)
    {
        a = y;
    }

    return a;
}

tuple setval(tuple cmaze,int i ,int j, int val)
{
        tuple row = cmaze.at(i);
        row = row.set_index_var(val,j);
        return cmaze.set_index_var(row,i);
}


;;    ! (signo de exclamaci√≥n): 33
;;    X: 88
;;    S: 83
;;    E: 69
;;    . (punto): 46
;;    ?  63


(int, int, int, tuple) solve(int n, int m, tuple maze) method_id
{

    tuple vis = maze;
    tuple mat = maze;

    int srcx = -1;
    int srcy = -1;

    int endx = -1;
    int endy = -1;


    int i = 0;
    int j = 0;

    while(i < n){
        j = 0;
        while(j < m){
            vis = setval(vis,i,j,0);
            j = j + 1;
        }
        i = i + 1;
    }

    ;; inicializar vis;

    i = 0;
    j = 0;
    while(i < n){

        j = 0;
        while(j < m){
            
            ;; .
            if(maze.at(i).at(j) == 46){
            
                mat = setval(mat,i,j,100);
            }


            ;; X
            if(maze.at(i).at(j) == 88){
                vis = setval(vis,i,j,-1);
                mat = setval(mat,i,j,100);
            }

            ;; ?
            if(maze.at(i).at(j) == 63){
                vis = setval(vis,i,j,-1);
                mat = setval(mat,i,j,100);
            }

            ;; S
            if(maze.at(i).at(j) == 83){
                mat = setval(mat,i,j,0);
                vis = setval(vis,i,j,-1);

                srcx = i;
                srcy = j;

            }

            ;; E
            if(maze.at(i).at(j) == 69){
                mat = setval(mat,i,j,100);

                endx = i;
                endy = j;


            }


            j = j + 1;
        }
        i = i + 1;
    }
    
    ;; setted inicial values;


    tuple movimientos = maze;

    movimientos = setval(movimientos, 0, 0, -1);
    movimientos = setval(movimientos, 0, 1, 0);
    movimientos = setval(movimientos, 1, 0, 1);
    movimientos = setval(movimientos, 1, 1, 0);
    movimientos = setval(movimientos, 2, 0, 0);
    movimientos = setval(movimientos, 2, 1, -1);
    movimientos = setval(movimientos, 3, 0, 0);
    movimientos = setval(movimientos, 3, 1, 1);
    movimientos = setval(movimientos, 4, 0, -1);
    movimientos = setval(movimientos, 4, 1, -1);
    movimientos = setval(movimientos, 5, 0, -1);
    movimientos = setval(movimientos, 5, 1, 1);
    movimientos = setval(movimientos, 6, 0, 1);
    movimientos = setval(movimientos, 6, 1, -1);
    movimientos = setval(movimientos, 7, 0, 1);
    movimientos = setval(movimientos, 7, 1, 1);

    ;; creados los posibles movimientos

    i = 0;
    j = 0;

    while(i < n * m){

        j = 0;
        while(j < n * m){

            int fila = j / m;
            int columna = j % m;
           
            if(vis.at(fila).at(columna)){

            
                int k = 0 ;

                while(k < 8){

                    int nuevaFila = fila + movimientos.at(k).at(0);
                    int nuevaColumna = columna + movimientos.at(k).at(1);
                    

                        if (out_of_index(n,m,nuevaFila,nuevaColumna)) {
                            if (vis.at(nuevaFila).at(nuevaColumna) == 0) {
                                if (mat.at(nuevaFila).at(nuevaColumna) > mat.at(fila).at(columna) + 1) 
                                {
                                     mat = setval(mat,nuevaFila,nuevaColumna,mat.at(fila).at(columna) + 1);
                                     vis = setval(vis,nuevaFila,nuevaColumna,-1);
                                }
                            }
                        }


                    k = k + 1;
                }



            }

            j = j + 1;
        }
        i = i + 1;
    }

        tuple xdxd = null();

    if(mat.at(endx).at(endy) == 100){

        return (-1,0,0,xdxd);

    }

    return(-1,0,0,xdxd);
    

}

